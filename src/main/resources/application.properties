quarkus.datasource.jdbc.driver=com.mysql.cj.jdbc.Driver
quarkus.datasource.jdbc.url=jdbc:mysql://192.168.1.20:3306/nautilus
quarkus.datasource.username=dev
quarkus.datasource.password=dev
#quarkus.hibernate-orm.log.sql=true

quarkus.mongodb.connection-string = mongodb://192.168.1.12:27017
quarkus.mongodb.database=requests_db

quarkus.swagger-ui.always-include=true
quarkus.http.port=8080

# Kafka
# Outgoing channel for saving a single image
#mp.messaging.outgoing.upload-requests.connector=smallrye-kafka
#mp.messaging.outgoing.upload-requests.topic=upload-requests
#mp.messaging.outgoing.upload-requests.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# Outgoing for image-requests
#mp.messaging.outgoing.image-requests.connector=smallrye-kafka
#mp.messaging.outgoing.image-requests.topic=image-requests
#mp.messaging.outgoing.image-requests.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# Incoming channel to get all the images saved -> image-response
#mp.messaging.incoming.image-responses.connector=smallrye-kafka
#mp.messaging.incoming.image-responses.topic=image-responses
#mp.messaging.incoming.image-responses.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer



quarkus.http.cors=true
quarkus.http.cors.origins=http://localhost:8100
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with,user-agent
quarkus.http.cors.access-control-allow-credentials=true
quarkus.http.cors.access-control-max-age=24H

#mp.jwt.verify.issuer=nautilus-jwt
#mp.jwt.verify.publickey.location=../jwt/publicKey.pem


# KEYCLOAK
quarkus.oidc.auth-server-url=http://192.168.1.25:8080/realms/quarkus
quarkus.oidc.client-id=backend-service
resteasy.role.based.security=true
quarkus.oidc.credentials.secret=secret
quarkus.oidc.token.issuer=any
# Enable Policy Enforcement
quarkus.keycloak.policy-enforcer.enable=true
quarkus.keycloak.policy-enforcer.lazy-load-paths=false
#quarkus.oidc.token.audience=account
quarkus.oidc.application-type=service
org.eclipse.microprofile.rest.client.propagateHeaders=Authorization
quarkus.log.category."io.quarkus.oidc".level=DEBUG
quarkus.log.category."org.keycloak".level=DEBUG


#   STORK --> docker run  -p 8500:8500 -p 8600:8600/udp --name=consul consul:v0.6.4 agent -server -bootstrap -ui -client=0.0.0.0
# Your configuration properties
#quarkus.rest-client.virtual-warehouse-api.url=http://localhost:8085
#
#quarkus.grpc.server.use-separate-server=false
#quarkus.grpc.clients.hello.host=http://localhost:8085

quarkus.grpc.clients.resourceAllocationServiceClient.host=http://localhost:8082


